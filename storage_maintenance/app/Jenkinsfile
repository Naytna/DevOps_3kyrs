pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDS = credentials('dockerhub_credentials')
        DOCKER_IMAGE     = "smnvsr/flask-storage-app"
        GIT_CREDS        = credentials('github_sshkey')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Naytna/DevOps_3kyrs.git',
                        credentialsId: 'github_sshkey'
                    ]]
                ])
            }
        }

        stage('Code Quality Analysis (Pylint)') {
  steps {
    sh '''
       python3 -m venv venv
       . venv/bin/activate
       pip install --no-cache-dir -r storage_maintenance/app/requirements.txt pylint

       # –∑–∞–ø—É—Å–∫–∞–µ–º pylint —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º rc-—Ñ–∞–π–ª–æ–º
       pylint storage_maintenance/app --exit-zero --output-format=json > pylint_report.json || true

       # —Ñ–µ–π–ª–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞ fatal
       python3 - <<'PYCODE'
import json, sys
data = json.load(open('pylint_report.json'))
fatal = [d for d in data if d.get('type')=='fatal']
if fatal:
    print(f"üö´ Pylint fatal issues found: {len(fatal)}")
    sys.exit(1)
PYCODE
    '''
  }
}


        stage('Secrets Scan (TruffleHog)') {
            steps {
                sh '''
                   apt-get update -qq && apt-get install -y -qq wget jq || true

                   if [ ! -f /tmp/trufflehog ]; then
                     wget -q -O /tmp/trufflehog https://github.com/trufflesecurity/trufflehog/releases/download/v3.16.0/trufflehog_linux_amd64
                     chmod +x /tmp/trufflehog
                   fi

                   /tmp/trufflehog filesystem storage_maintenance/app --json > trufflehog.json || true
                   FOUND=$(jq '. | length' trufflehog.json)
                   if [ "$FOUND" -gt 0 ]; then
                     echo "üîë Potential secrets detected: $FOUND"
                     exit 1
                   fi
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE:$BUILD_NUMBER storage_maintenance/app'
                sh 'docker tag $DOCKER_IMAGE:$BUILD_NUMBER $DOCKER_IMAGE:latest'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh 'echo $DOCKER_HUB_CREDS_PSW | docker login -u $DOCKER_HUB_CREDS_USR --password-stdin'
                sh 'docker push $DOCKER_IMAGE:$BUILD_NUMBER'
                sh 'docker push $DOCKER_IMAGE:latest'
            }
        }

        stage('Clean Up') {
            steps {
                sh 'docker rmi $DOCKER_IMAGE:$BUILD_NUMBER || true'
                sh 'docker rmi $DOCKER_IMAGE:latest     || true'
            }
        }

        stage('Deploy to Stage') {
            when { branch 'dev' }
            steps {
                sshagent(credentials: ['stage_ssh_key']) {
                    sh """
                       ssh -o StrictHostKeyChecking=no serega@5.101.69.100 '
                         cd ~/app &&
                         docker-compose pull &&
                         docker-compose down &&
                         docker-compose up -d
                       '
                    """
                }
            }
        }
    }

    post {
        always {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç—ã –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            archiveArtifacts artifacts: 'pylint_report.json, trufflehog.json', fingerprint: true
            sh 'docker logout'
        }
    }
}

