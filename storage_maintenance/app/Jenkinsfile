pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDS = credentials('dockerhub_credentials')
        DOCKER_IMAGE     = "smnvsr/flask-storage-app"
        GIT_CREDS        = credentials('github_sshkey')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Naytna/DevOps_3kyrs.git',
                        credentialsId: 'github_sshkey'
                    ]]
                ])
            }
        }

stage('Install Analyzers') {
            steps {
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install pylint bandit trufflehog
                '''
            }
        }

stage('Run Tests') {
            parallel {
                stage('Security Scan') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            
                            # cd /root/oboldui/mip_devops
                            
                            echo "Running Bandit scan in: $(pwd)"
                            bandit -r . --exclude ./venv -f json -o bandit_report.json || true
                            
                            echo "=== Bandit Report Summary ==="
                            cat bandit_report.json
                            
                            if jq -e '.results[] | select(.issue_severity == "CRITICAL")' bandit_report.json >/dev/null; then
                                echo "ERROR: Bandit detected CRITICAL vulnerabilities:"
                                jq '.results[] | select(.issue_severity == "CRITICAL")' bandit_report.json
                                exit 1
                            else
                                echo "No CRITICAL vulnerabilities found."
                            fi
                        '''
                    }
                }

                stage('Secrets Detection') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            
                            # cd /root/oboldui/mip_devops
                            
                            echo "Scanning for secrets in: $(pwd)"
                            trufflehog filesystem . --json > trufflehog_report.json || true
                            
                            echo "=== TruffleHog Report ==="
                            cat trufflehog_report.json
                            
                            if [ -s trufflehog_report.json ]; then
                                echo "ERROR: TruffleHog detected secrets in /root/oboldui/mip_devops!"
                                exit 1
                            else
                                echo "No secrets found."
                            fi
                        '''
                    }
                }

                stage('Code Quality') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            pylint app.py database.py forms.py --exit-zero > pylint_report.txt
                            echo "Pylint Report:"
                            cat pylint_report.txt
                            echo "Ошибки уровней E и F:"
                            grep -E '^[EF]' pylint_report.txt || echo "Нет ошибок уровней E или F"
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE:$BUILD_NUMBER storage_maintenance/app'
                sh 'docker tag $DOCKER_IMAGE:$BUILD_NUMBER $DOCKER_IMAGE:latest'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh 'echo $DOCKER_HUB_CREDS_PSW | docker login -u $DOCKER_HUB_CREDS_USR --password-stdin'
                sh 'docker push $DOCKER_IMAGE:$BUILD_NUMBER'
                sh 'docker push $DOCKER_IMAGE:latest'
            }
        }

        stage('Clean Up') {
            steps {
                sh 'docker rmi $DOCKER_IMAGE:$BUILD_NUMBER || true'
                sh 'docker rmi $DOCKER_IMAGE:latest     || true'
            }
        }

        stage('Deploy to Stage') {
            when { branch 'dev' }
            steps {
                sshagent(credentials: ['stage_ssh_key']) {
                    sh """
                       ssh -o StrictHostKeyChecking=no serega@5.101.69.100 '
                         cd ~/app &&
                         docker-compose pull &&
                         docker-compose down &&
                         docker-compose up -d
                       '
                    """
                }
            }
        }
    }

    post {
        always {
            // Сохраняем отчёты как артефакты
            archiveArtifacts artifacts: 'pylint_report.json, trufflehog.json', fingerprint: true
            sh 'docker logout'
        }
    }
}

