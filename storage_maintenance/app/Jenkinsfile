pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDS = credentials('dockerhub_credentials')
        DOCKER_IMAGE = "smnvsr/flask-storage-app"
        GIT_CREDS = credentials('github_sshkey')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Naytna/DevOps_3kyrs.git',
                        credentialsId: 'github_sshkey'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE:$BUILD_NUMBER storage_maintenance/app'
                sh 'docker tag $DOCKER_IMAGE:$BUILD_NUMBER $DOCKER_IMAGE:latest'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh 'echo $DOCKER_HUB_CREDS_PSW | docker login -u $DOCKER_HUB_CREDS_USR --password-stdin'
                sh 'docker push $DOCKER_IMAGE:$BUILD_NUMBER'
                sh 'docker push $DOCKER_IMAGE:latest'
            }
        }

        stage('Clean Up') {
            steps {
                sh 'docker rmi $DOCKER_IMAGE:$BUILD_NUMBER || true'
                sh 'docker rmi $DOCKER_IMAGE:latest || true'
            }
        }

        stage('Deploy to Stage') {
	  when { branch 'dev' }
	  steps {
	    sshagent(credentials: ['stage_ssh_key']) {
	      sh """
		 ssh -o StrictHostKeyChecking=no serega@5.101.69.100 '
	cd ~/app &&
       docker-compose pull &&
        docker-compose down &&
        docker-compose up -d
      '
      """
    }
  }
}

    }

    post {
        always {
            sh 'docker logout'
        }
    }
}
